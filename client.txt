import pygame
import socket
import random

pygame.init()
WIDTH, HEIGHT = 1000, 550
CELL_SIZE = 40
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Морський бій - Мережева гра")

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
RED = (255, 0, 0)
ORANGE = (255, 165, 0)
GRAY = (200, 200, 200)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

my_board = [[0 for _ in range(10)] for _ in range(10)]
enemy_board = [[0 for _ in range(10)] for _ in range(10)]
cheat_board = [[0 for _ in range(10)] for _ in range(10)]  # Окрема дошка для читерського відображення
ships = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]

placing = True
current_ship = 0
horizontal = True
preview_pos = None
my_turn = False
player_id = None
game_message = "Розставляйте кораблі"
message_buffer = []
game_over = False
cheating = False  # Прапорець для активації чита

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('25.x.x.x', 993))  # Заміни на IP сервера з Hamachi
client.setblocking(False)

font = pygame.font.SysFont('arial', 30)
button_font = pygame.font.SysFont('arial', 40)

def reset_game():
    global my_board, enemy_board, cheat_board, placing, current_ship, preview_pos, my_turn, game_message, game_over, cheating
    my_board = [[0 for _ in range(10)] for _ in range(10)]
    enemy_board = [[0 for _ in range(10)] for _ in range(10)]
    cheat_board = [[0 for _ in range(10)] for _ in range(10)]
    placing = True
    current_ship = 0
    horizontal = True
    preview_pos = None
    my_turn = False
    game_message = "Розставляйте кораблі"
    game_over = False
    cheating = False

def draw_grid(board, offset_x, offset_y, show_ships=True):
    word = "РЕСПУБЛІКА"
    for i in range(10):
        letter = font.render(word[i], True, BLACK)
        screen.blit(letter, (offset_x + i * CELL_SIZE + 10, offset_y - 40))

    for i in range(10):
        num = font.render(str(i + 1), True, BLACK)
        if i + 1 == 10:
            screen.blit(num, (offset_x - 40, offset_y + i * CELL_SIZE + 5))
        else:
            screen.blit(num, (offset_x - 30, offset_y + i * CELL_SIZE + 5))

    for x in range(10):
        for y in range(10):
            rect = pygame.Rect(offset_x + x * CELL_SIZE, offset_y + y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
            pygame.draw.rect(screen, BLACK, rect, 1)
            if board[y][x] == 1 and show_ships:
                pygame.draw.rect(screen, BLUE, rect)
            elif board[y][x] == 2:
                pygame.draw.rect(screen, ORANGE, rect)
            elif board[y][x] == 3:
                pygame.draw.rect(screen, RED, rect)
            elif board[y][x] == 4:
                pygame.draw.rect(screen, BLACK, rect)

def draw_cheat_board(offset_x, offset_y):
    if cheating:
        for x in range(10):
            for y in range(10):
                rect = pygame.Rect(offset_x + x * CELL_SIZE, offset_y + y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
                if cheat_board[y][x] == 1:  # Показуємо живі кораблі противника
                    pygame.draw.rect(screen, YELLOW, rect)  # Жовтий для читерських кораблів

def draw_preview(offset_x, offset_y):
    if preview_pos is None or current_ship >= len(ships):
        return
    x, y = preview_pos
    size = ships[current_ship]
    can_place = can_place_ship(my_board, x, y, size, horizontal)
    color = GREEN if can_place else RED

    if horizontal:
        for i in range(size):
            if x + i < 10:
                rect = pygame.Rect(offset_x + (x + i) * CELL_SIZE, offset_y + y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
                pygame.draw.rect(screen, color, rect, 3)
    else:
        for i in range(size):
            if y + i < 10:
                rect = pygame.Rect(offset_x + x * CELL_SIZE, offset_y + (y + i) * CELL_SIZE, CELL_SIZE, CELL_SIZE)
                pygame.draw.rect(screen, color, rect, 3)

def can_place_ship(board, x, y, size, horizontal):
    if horizontal:
        if x + size > 10:
            return False
        for i in range(max(0, x - 1), min(10, x + size + 1)):
            for j in range(max(0, y - 1), min(10, y + 2)):
                if board[j][i] != 0:
                    return False
    else:
        if y + size > 10:
            return False
        for i in range(max(0, x - 1), min(10, x + 2)):
            for j in range(max(0, y - 1), min(10, y + size + 1)):
                if board[j][i] != 0:
                    return False
    return True

def place_ship(board, x, y, size, horizontal):
    if horizontal:
        for i in range(size):
            board[y][x + i] = 1
    else:
        for i in range(size):
            board[y + i][x] = 1

def random_place_ships(board, ships):
    global placing, current_ship
    for y in range(10):
        for x in range(10):
            board[y][x] = 0

    for size in ships:
        placed = False
        while not placed:
            x = random.randint(0, 9)
            y = random.randint(0, 9)
            horizontal = random.choice([True, False])
            if can_place_ship(board, x, y, size, horizontal):
                place_ship(board, x, y, size, horizontal)
                placed = True
    placing = False
    current_ship = len(ships)

def mark_destroyed(board, x, y):
    ship_cells = [(x, y)]
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        while 0 <= nx < 10 and 0 <= ny < 10 and (board[ny][nx] == 1 or board[ny][nx] == 2):
            ship_cells.append((nx, ny))
            nx += dx
            ny += dy

    for sx, sy in ship_cells:
        board[sy][sx] = 3

    for sx, sy in ship_cells:
        for dx in range(-1, 2):
            for dy in range(-1, 2):
                nx, ny = sx + dx, sy + dy
                if 0 <= nx < 10 and 0 <= ny < 10 and board[ny][nx] == 0:
                    board[ny][nx] = 4

def check_hit(x, y):
    if my_board[y][x] == 1:
        my_board[y][x] = 2
        ship_destroyed = True
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            while 0 <= nx < 10 and 0 <= ny < 10:
                if my_board[ny][nx] == 1:
                    ship_destroyed = False
                    break
                if my_board[ny][nx] != 2 and my_board[ny][nx] != 1:
                    break
                nx += dx
                ny += dy
        if ship_destroyed:
            mark_destroyed(my_board, x, y)
            if all(cell != 1 and cell != 2 for row in my_board for cell in row):
                return "GAME_OVER"
            return "KILLED"
        return "HIT"
    else:
        my_board[y][x] = 4
        return "MISS"

def draw_restart_button():
    button_rect = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 2 + 50, 200, 60)
    pygame.draw.rect(screen, GREEN, button_rect)
    pygame.draw.rect(screen, BLACK, button_rect, 2)
    text = button_font.render("Реванш", True, BLACK)
    text_rect = text.get_rect(center=button_rect.center)
    screen.blit(text, text_rect)
    return button_rect

def handle_network():
    global my_turn, game_message, placing, player_id, game_over, cheating, cheat_board
    try:
        while True:
            message = client.recv(1024).decode()
            if message:
                messages = message.strip().split("\n")
                message_buffer.extend(messages)
            else:
                break
    except BlockingIOError:
        pass

    while message_buffer:
        message = message_buffer.pop(0)
        if not message:
            continue
        print(f"Отримано повідомлення: {message}")
        if message.startswith("PLAYER:"):
            player_id = int(message[7:])
            game_message = f"Ви гравець {player_id + 1}. Розставляйте кораблі"
        elif message == "YOUR_TURN":
            my_turn = True
            game_message = "Ваш хід!"
        elif message == "WAIT":
            my_turn = False
            game_message = "Хід суперника..."
        elif message == "GAME_OVER":
            game_message = "Ви програли! Гра закінчена."
            my_turn = False
            game_over = True
        elif message == "YOU_WIN":
            game_message = "Ви перемогли! Гра закінчена."
            my_turn = False
            game_over = True
        elif message == "OPPONENT_DISCONNECTED":
            game_message = "Суперник від'єднався. Гра закінчена."
            my_turn = False
            game_over = True
        elif message.startswith("SHOT:"):
            x, y = map(int, message[5:].split())
            result = check_hit(x, y)
            client.send(f"RESULT:{result}\n".encode())
        elif message.startswith("OUTCOME:"):
            try:
                parts = message.split(":")
                if len(parts) >= 4:
                    result, x, y = parts[1], int(parts[2]), int(parts[3])
                    enemy_board[y][x] = 4 if result == "MISS" else 2
                    if result == "KILLED":
                        mark_destroyed(enemy_board, x, y)
                else:
                    print(f"Неповне повідомлення OUTCOME: {message}")
            except (IndexError, ValueError) as e:
                print(f"Помилка обробки OUTCOME: {e}, повідомлення: {message}")
        elif message == "RESTART":
            reset_game()
        elif message == "GET_BOARD":  # Відправляємо свою дошку для чита
            board_str = ""
            for row in my_board:
                board_str += " ".join(map(str, row)) + ";"
            client.send(f"BOARD:{board_str[:-1]}\n".encode())
        elif message.startswith("BOARD:"):  # Отримуємо дошку противника
            cheating = True
            board_data = message[6:].split(";")
            for y, row in enumerate(board_data):
                cheat_board[y] = list(map(int, row.split()))

running = True
clock = pygame.time.Clock()
f3_pressed = False
f4_pressed = False

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            x, y = event.pos
            if placing:
                grid_x = (x - 50) // CELL_SIZE
                grid_y = (y - 50) // CELL_SIZE
                if 0 <= grid_x < 10 and 0 <= grid_y < 10:
                    preview_pos = (grid_x, grid_y)
            elif my_turn and not placing and not game_over:
                grid_x = (x - 550) // CELL_SIZE
                grid_y = (y - 50) // CELL_SIZE
                if 0 <= grid_x < 10 and 0 <= grid_y < 10 and enemy_board[grid_y][grid_x] == 0:
                    client.send(f"MOVE:{grid_x} {grid_y}\n".encode())
                    my_turn = False
                    game_message = "Чекаємо відповідь..."
            elif game_over:
                restart_button = draw_restart_button()
                if restart_button.collidepoint(x, y):
                    client.send("RESTART\n".encode())
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_F3:
                f3_pressed = True
            elif event.key == pygame.K_F4:
                f4_pressed = True
            elif placing and preview_pos is not None:
                x, y = preview_pos
                if event.key == pygame.K_f:
                    random_place_ships(my_board, ships)
                    client.send("READY\n".encode())
                    game_message = "Чекаємо суперника..."
                elif event.key == pygame.K_r:
                    horizontal = not horizontal
                    game_message = f"Розставляйте кораблі ({'горизонтально' if horizontal else 'вертикально'})"
                elif event.key == pygame.K_LEFT and x > 0:
                    preview_pos = (x - 1, y)
                elif event.key == pygame.K_RIGHT and (horizontal and x + ships[current_ship] < 10 or not horizontal and x < 9):
                    preview_pos = (x + 1, y)
                elif event.key == pygame.K_UP and y > 0:
                    preview_pos = (x, y - 1)
                elif event.key == pygame.K_DOWN and (not horizontal and y + ships[current_ship] < 10 or horizontal and y < 9):
                    preview_pos = (x, y + 1)
                elif event.key == pygame.K_e:
                    if can_place_ship(my_board, x, y, ships[current_ship], horizontal):
                        place_ship(my_board, x, y, ships[current_ship], horizontal)
                        current_ship += 1
                        preview_pos = None
                        if current_ship >= len(ships):
                            placing = False
                            client.send("READY\n".encode())
                            game_message = "Чекаємо суперника..."
        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_F3:
                f3_pressed = False
            elif event.key == pygame.K_F4:
                f4_pressed = False

    # Перевірка комбінації F3 + F4 для активації чита
    if f3_pressed and f4_pressed and not placing and not game_over:
        client.send("CHEAT\n".encode())
        f3_pressed = False  # Скидаємо, щоб не спамити запитами
        f4_pressed = False

    handle_network()

    screen.fill(WHITE)
    draw_grid(my_board, 50, 50)
    draw_grid(enemy_board, 550, 50, show_ships=False)
    draw_cheat_board(550, 50)  # Додаємо читерське відображення поверх enemy_board
    if placing and current_ship < len(ships):
        draw_preview(50, 50)

    message_label = font.render(game_message, True, GREEN if my_turn else BLACK)
    screen.blit(message_label, (50, HEIGHT - 40))

    if game_over:
        draw_restart_button()

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
client.close()
